package View;

import Classes.Circle;
import Classes.Line;
import Classes.Rectangle;
import Classes.Shape;
import Classes.Square;
import Classes.Triangle;
import java.util.Iterator;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mazen
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    public void undoresize(int i) {
        myboard.redotemp.add(myboard.x.get(i));
        myboard.redocount++;
        myboard.redomode[myboard.redocount] = 1;
        myboard.x.remove(i);
        myboard.x.add(myboard.resizeTemp.get(myboard.resizeTemp.size() - 1));
        myboard.resizeTemp.remove(myboard.resizeTemp.size() - 1);
        myboard.undocount--;
        myboard.repaint();
    }
    public void undomove(int i) {
        myboard.redotemp.add(myboard.x.get(i));
        myboard.redocount++;
        myboard.redomode[myboard.redocount] = 1;
        myboard.x.remove(i);
        myboard.x.add(myboard.moveTemp.get(myboard.moveTemp.size() - 1));
        myboard.moveTemp.remove(myboard.moveTemp.size() - 1);
        myboard.undocount--;
        myboard.repaint();
    }

    public void redoDEL(int i) {
        System.out.println("Redo Delete");
        myboard.redocount--;
        myboard.delTemp.add(myboard.x.get(i));
        myboard.x.remove(i);
        myboard.undomode[myboard.undocount] = 2;
        myboard.undocount++;
        myboard.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myboard =  Board.getInstance();
        jButton2 = new javax.swing.JButton();
        jColorChooser2 = new javax.swing.JColorChooser();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        myboard.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout myboardLayout = new javax.swing.GroupLayout(myboard);
        myboard.setLayout(myboardLayout);
        myboardLayout.setHorizontalGroup(
            myboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        myboardLayout.setVerticalGroup(
            myboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/rectangle-frame.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/Circle.jpg"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/square.jpg"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/Triangle.jpg"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jCheckBox1.setText("Fill");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/move.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/delete.jpg"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/copy.png"))); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/undo.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/redo.png"))); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/Line.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUIicons/resize.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setText("Modify");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel2.setText("Draw");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jColorChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(170, 170, 170))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(myboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(39, 39, 39))))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(myboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton11)
                            .addComponent(jButton10))
                        .addGap(94, 94, 94)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jColorChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        myboard.mode = 0;
        myboard.currentcolor = jColorChooser2.getColor();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        myboard.mode = 1;
        myboard.currentcolor = jColorChooser2.getColor();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 2;
        myboard.currentcolor = jColorChooser2.getColor();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 3;
        myboard.currentcolor = jColorChooser2.getColor();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 4;
        myboard.currentcolor = jColorChooser2.getColor();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox1.isSelected()) {
            myboard.fill = true;
        } else {
            myboard.fill = false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 5;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 6;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 7;
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        myboard.mode = 8;
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        System.out.println(myboard.undomode[myboard.undocount]);
        try {
            Iterator<Shape> itx= myboard.x.iterator();
            Iterator<Shape> itdeltemp= myboard.delTemp.iterator();
            if (itdeltemp.hasNext() && myboard.undomode[myboard.undocount] == 2) {
                System.out.println("Undo Delete");
                myboard.x.add(myboard.delTemp.get(myboard.delTemp.size() - 1));
                if(myboard.delTemp.get(myboard.delTemp.size() - 1)instanceof Rectangle) {
                    Rectangle del = (Rectangle) myboard.delTemp.get(myboard.delTemp.size() - 1);
                    myboard.delx1=del.getX1();myboard.dely1=del.getY1();myboard.delx2=del.getX2();myboard.dely2=del.getY2();
                }
                myboard.delTemp.remove(myboard.delTemp.size() - 1);
                myboard.undocount--;
                myboard.redocount++;
                myboard.redomode[myboard.redocount] = 2;
                repaint();
                return;
            }
            if (!myboard.resizeTemp.isEmpty() && myboard.undomode[myboard.undocount] == 1) {
                System.out.println("Undo Modification");
                for (int i = 0; i <= myboard.x.size() - 1; i++) {
                    try {
                        if (myboard.resizeTemp.get(myboard.resizeTemp.size() - 1) instanceof Rectangle && myboard.x.get(i) instanceof Rectangle) {
                            Rectangle mod = (Rectangle) myboard.resizeTemp.get(myboard.resizeTemp.size() - 1);
                            Rectangle x = (Rectangle) myboard.x.get(i);
                            if (x.getX1() == mod.getX1() && x.getY1() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;
                            } 
                            else if (x.getX2() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;} 
                            else if (x.getX2() == mod.getX1() && x.getY1() == mod.getY1()) { undoresize(i); System.out.println("Undo Resize");return;} 
                            else if (x.getX1() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return; }
                        }
                        if (myboard.resizeTemp.get(myboard.resizeTemp.size() - 1) instanceof Circle && myboard.x.get(i) instanceof Circle) {
                            Circle mod = (Circle) myboard.resizeTemp.get(myboard.resizeTemp.size() - 1);
                            Circle x = (Circle) myboard.x.get(i);
                            if (x.getX1() == mod.getX1() && x.getY1() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize"); return;} 
                            else if (x.getX2() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;} 
                            else if (x.getX2() == mod.getX1() && x.getY1() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize"); return;}
                            else if (x.getX1() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize"); return;}
                        }
                        if (myboard.resizeTemp.get(myboard.resizeTemp.size() - 1) instanceof Line && myboard.x.get(i) instanceof Line) {
                            Line mod = (Line) myboard.resizeTemp.get(myboard.resizeTemp.size() - 1);
                            Line x = (Line) myboard.x.get(i);
                            if (x.getX1() == mod.getX1() && x.getY1() == mod.getY1()) { undoresize(i); System.out.println("Undo Resize");return;}
                        }
                        if (myboard.resizeTemp.get(myboard.resizeTemp.size() - 1) instanceof Square && myboard.x.get(i) instanceof Square) {
                            Square mod = (Square) myboard.resizeTemp.get(myboard.resizeTemp.size() - 1);
                            Square x = (Square) myboard.x.get(i);
                            if (x.getX1() == mod.getX1() && x.getY1() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;} 
                            else if (x.getX2() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;} 
                            else if (x.getX2() == mod.getX1() && x.getY1() == mod.getY1()) { undoresize(i); System.out.println("Undo Resize"); return;} 
                            else if (x.getX1() == mod.getX1() && x.getY2() == mod.getY1()) {undoresize(i); System.out.println("Undo Resize");return;}
                        }
                        if (myboard.resizeTemp.get(myboard.resizeTemp.size() - 1) instanceof Triangle && myboard.x.get(i) instanceof Triangle) {
                            Triangle mod = (Triangle) myboard.resizeTemp.get(myboard.resizeTemp.size() - 1);
                            Triangle x = (Triangle) myboard.x.get(i);
                            if (x.getX1() == mod.getX1() && x.getY1() == mod.getY1()) { undoresize(i); System.out.println("Undo Resize"); return;}
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                    }
                }
            }
            
            if (!myboard.moveTemp.isEmpty() && myboard.undomode[myboard.undocount] == 3) {
                System.out.println("Undo Move");
                for (int i = 0; i <= myboard.x.size() - 1; i++) {
                    try {
                        if (myboard.moveTemp.get(myboard.moveTemp.size() - 1) instanceof Rectangle && myboard.x.get(i) instanceof Rectangle) {
                            Rectangle mod = (Rectangle) myboard.moveTemp.get(myboard.moveTemp.size() - 1);
                            Rectangle x = (Rectangle) myboard.x.get(i);
                            if ((x.getX2()-x.getX1())==(mod.getX2()-mod.getX1())) {System.out.println("Undo Move"); undomove(i);return; }
                        }
                        if (myboard.moveTemp.get(myboard.moveTemp.size() - 1) instanceof Circle && myboard.x.get(i) instanceof Circle) {
                            Circle mod = (Circle) myboard.moveTemp.get(myboard.moveTemp.size() - 1);
                            Circle x = (Circle) myboard.x.get(i);
                            if (Math.abs(x.getY2()-x.getY1())==Math.abs(mod.getY2()-mod.getY1())) {System.out.println("Undo Move"); undomove(i);return; }
                        }
                        if (myboard.moveTemp.get(myboard.moveTemp.size() - 1) instanceof Line && myboard.x.get(i) instanceof Line) {
                            Line mod = (Line) myboard.moveTemp.get(myboard.moveTemp.size() - 1);
                            Line x = (Line) myboard.x.get(i);
                            if ((x.getX2()-x.getX1())==(mod.getX2()-mod.getX1())) {System.out.println("Undo Move"); undomove(i);return; }
                        }
                        if (myboard.moveTemp.get(myboard.moveTemp.size() - 1) instanceof Square && myboard.x.get(i) instanceof Square) {
                            Square mod = (Square) myboard.moveTemp.get(myboard.moveTemp.size() - 1);
                            Square x = (Square) myboard.x.get(i);
                            if (Math.abs(x.getY2()-x.getY1())==Math.abs(mod.getY2()-mod.getY1())) {System.out.println("Undo Move"); undomove(i);return; }
                        }
                        if (myboard.moveTemp.get(myboard.moveTemp.size() - 1) instanceof Triangle && myboard.x.get(i) instanceof Triangle) {
                            Triangle mod = (Triangle) myboard.moveTemp.get(myboard.moveTemp.size() - 1);
                            Triangle x = (Triangle) myboard.x.get(i);
                            if ((x.getX2()-x.getX1())==(mod.getX2()-mod.getX1())) {System.out.println("Undo Move"); undomove(i);return; }
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                    }
                }
            }
            
            
            if (itx.hasNext()&& myboard.undomode[myboard.undocount] != 1 && myboard.undomode[myboard.undocount] != 2 && myboard.undomode[myboard.undocount] != 3) {
                System.out.println("Undo Copy/Add");
                myboard.redotemp.add(myboard.x.get(myboard.x.size() - 1));
                myboard.redocount++;
                if (myboard.undocount > 0){
                    myboard.undocount--;
                }
                myboard.redomode[myboard.redocount] = 3;
                myboard.x.remove(myboard.x.size() - 1);
                myboard.repaint();
            }
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        System.out.println(myboard.redomode[myboard.redocount]);
        if (myboard.redomode[myboard.redocount] == 2) {
            for (int i = 0; i <= myboard.x.size() - 1; i++) {
                try {
                    if (myboard.x.get(i) instanceof Rectangle) {
                        Rectangle x = (Rectangle) myboard.x.get(i);
                        if (x.getX1() == myboard.delx1 && x.getY1() == myboard.dely1 && x.getX2() == myboard.delx2 && x.getY2() == myboard.dely2) {redoDEL(i);return;}
                    }
                    if (myboard.x.get(i) instanceof Line) {
                        Line x = (Line) myboard.x.get(i);
                        if (x.getX1() == myboard.delx1 && x.getY1() == myboard.dely1 && x.getX2() == myboard.delx2 && x.getY2() == myboard.dely2) {redoDEL(i);return;}
                    }
                    if (myboard.x.get(i) instanceof Circle) {
                        Circle x = (Circle) myboard.x.get(i);
                        if (x.getX1() == myboard.delx1 && x.getY1() == myboard.dely1 && x.getX2() == myboard.delx2 && x.getY2() == myboard.dely2) {    redoDEL(i);return;}
                    }
                    if (myboard.x.get(i) instanceof Triangle) {
                        Triangle x = (Triangle) myboard.x.get(i);
                        if (x.getX1() == myboard.delx1 && x.getY1() == myboard.dely1 && x.getX2() == myboard.delx2 && x.getY2() == myboard.dely2) { redoDEL(i);return;}
                    }
                    if (myboard.x.get(i) instanceof Square) {
                        Square x = (Square) myboard.x.get(i);
                        if (x.getX1() == myboard.delx1 && x.getY1() == myboard.dely1 && x.getX2() == myboard.delx2 && x.getY2() == myboard.dely2) { redoDEL(i);return;}
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                }
            }
            repaint();
        }
        if (!myboard.redotemp.isEmpty() && myboard.redomode[myboard.redocount] == 1) {
            myboard.redocount--;
            myboard.resizeTemp.add(myboard.x.get(myboard.x.size() - 1));
            myboard.x.remove(myboard.x.size() - 1);
            myboard.x.add(myboard.redotemp.get(myboard.redotemp.size() - 1));
            myboard.redotemp.remove(myboard.redotemp.size() - 1);
            myboard.undocount++;
            myboard.undomode[myboard.undocount] = 1;
            repaint();
        }
        if (!myboard.redotemp.isEmpty() && myboard.redomode[myboard.redocount] == 3) {
            myboard.redocount--;
            myboard.x.add(myboard.redotemp.get(myboard.redotemp.size() - 1));
            myboard.redotemp.remove(myboard.redotemp.size() - 1);
            repaint();
        }

    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
                
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                JOptionPane.showMessageDialog(null, "Select a color then select a shape");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JColorChooser jColorChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private View.Board myboard;
    // End of variables declaration//GEN-END:variables
}
